# services/business/compose/docker-compose.yml
version: "3.9"

services:
  redis:
    image: redis:7-alpine
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-dev}
    container_name: business_redis
    restart: unless-stopped
    networks:
      - business_network
    volumes:
      - ../../../config/redis.conf.template:/usr/local/etc/redis/redis.conf.template:ro
    entrypoint: >
      sh -c "
      echo '=== Debug Info ===' &&
      echo 'REDIS_USERNAME=' \$REDIS_USERNAME &&
      echo 'REDIS_PASSWORD=' \$REDIS_PASSWORD &&
      env | grep REDIS &&
      echo '=== Template ===' &&
      cat /usr/local/etc/redis/redis.conf.template &&
      apk add --no-cache gettext &&
      envsubst < /usr/local/etc/redis/redis.conf.template > /usr/local/etc/redis/redis.conf &&
      redis-server /usr/local/etc/redis/redis.conf
      "
    healthcheck:
      test: ["CMD", "sh", "-c", "redis-cli -u redis://$REDIS_USERNAME:$REDIS_PASSWORD@localhost:6379 ping"]
      interval: 1m
      timeout: 30s
      retries: 5
      start_period: 30s

  backend:
    build:
      context: ../../../          # 루트 디렉토리를 context로 설정
      dockerfile: services/business/backend/Dockerfile
      target: ${BUILD_TARGET:-dev}
    container_name: business_backend
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-dev}
    restart: unless-stopped
    networks:
      - business_network
    volumes:
      - ../../../config:/app/config:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  frontend:
    build:
      context: ../../../          # 루트 디렉토리를 context로 설정
      dockerfile: services/business/frontend/Dockerfile
      target: ${BUILD_TARGET:-dev}
    container_name: business_frontend
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-dev}
      - BACKEND_URL=http://backend:8000
    restart: unless-stopped
    networks:
      - business_network
    depends_on:
      backend:
        condition: service_healthy

networks:
  business_network:
    driver: bridge

volumes:
  redis_data:  
    driver: local
