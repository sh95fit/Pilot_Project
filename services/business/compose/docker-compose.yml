# services/business/compose/docker-compose.yml
version: "3.9"

services:
  redis:
    image: redis:7-alpine
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-dev}
      - TZ=Asia/Seoul
    container_name: business_redis
    restart: unless-stopped
    networks:
      - business_network
    volumes:
      - ../../../scripts/redis-init.sh:/usr/local/bin/redis-init.sh:ro
      - redis_data:/data
    entrypoint: ["sh", "/usr/local/bin/redis-init.sh"]
    healthcheck:
      test: ["CMD", "sh", "-c", "redis-cli -u redis://$REDIS_USERNAME:$REDIS_PASSWORD@localhost:6379 ping"]
      interval: 1m
      timeout: 30s
      retries: 5
      start_period: 30s

  backend:
    build:
      context: ../../../          # 루트 디렉토리를 context로 설정
      dockerfile: services/business/backend/Dockerfile
      target: ${BUILD_TARGET:-dev}
    container_name: business_backend
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-dev}
      - TZ=Asia/Seoul
    restart: unless-stopped
    networks:
      - business_network
    volumes:
      - ../../../config:/app/config:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  frontend:
    build:
      context: ../../../          # 루트 디렉토리를 context로 설정
      dockerfile: services/business/frontend/Dockerfile
      target: ${BUILD_TARGET:-dev}
      # args:
      #   - USER_UID=${DOCKER_UID:-1000}
      #   - USER_GID=${DOCKER_GID:-1000}
    container_name: business_frontend
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-dev}
      - BACKEND_URL=http://backend:8000
      - TZ=Asia/Seoul
    restart: unless-stopped
    networks:
      - business_network
    depends_on:
      backend:
        condition: service_healthy

networks:
  business_network:
    driver: bridge

volumes:
  redis_data:  
    driver: local
