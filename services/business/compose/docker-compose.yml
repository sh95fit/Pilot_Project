# services/business/compose/docker-compose.yml
version: "3.9"

services:
  backend:
    build:
      context: ../../../          # 루트 디렉토리를 context로 설정
      dockerfile: services/business/backend/Dockerfile
      target: ${BUILD_TARGET:-dev}
    container_name: business_backend
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-dev}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - REDIS_PASSWORD=${REDIS_PASSWORD:-dev_password}
    restart: unless-stopped
    networks:
      - business_network
    volumes:
      - ../../../config:/app/config:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  frontend:
    build:
      context: ../../../          # 루트 디렉토리를 context로 설정
      dockerfile: services/business/frontend/Dockerfile
      target: ${BUILD_TARGET:-dev}
    container_name: business_frontend
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-dev}
      - BACKEND_URL=http://backend:8000
    restart: unless-stopped
    networks:
      - business_network
    depends_on:
      backend:
        condition: service_healthy

  redis:
    image: redis:7-alpine
    container_name: business_redis
    restart: unless-stopped
    networks:
      - business_network
    volumes:
      - redis_data:/data
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-dev_password}
    command: >
      sh -c '
        redis-server
        --appendonly yes
        --requirepass "$$REDIS_PASSWORD"
      '
    healthcheck:
      test: ["CMD", "sh", "-c", "redis-cli --no-auth-warning -a \"$$REDIS_PASSWORD\" ping"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s

networks:
  business_network:
    driver: bridge

volumes:
  redis_data:  
    driver: local
